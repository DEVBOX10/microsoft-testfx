#nullable enable
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreInstancesOfType<T>(System.Collections.Generic.IEnumerable<T?>? collection, System.Type? expectedType) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreInstancesOfType<T>(System.Collections.Generic.IEnumerable<T?>? collection, System.Type? expectedType, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreInstancesOfType<T>(System.Collections.Generic.IEnumerable<T?>? collection, System.Type? expectedType, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreNotNull<T>(System.Collections.Generic.IEnumerable<T?>? collection) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreNotNull<T>(System.Collections.Generic.IEnumerable<T?>? collection, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreNotNull<T>(System.Collections.Generic.IEnumerable<T?>? collection, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreUnique<T>(System.Collections.Generic.IEnumerable<T?>? collection) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreUnique<T>(System.Collections.Generic.IEnumerable<T?>? collection, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AllItemsAreUnique<T>(System.Collections.Generic.IEnumerable<T?>? collection, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual<T>(System.Collections.Generic.IEnumerable<T?>? notExpected, System.Collections.Generic.IEnumerable<T?>? actual) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual<T>(System.Collections.Generic.IEnumerable<T?>? notExpected, System.Collections.Generic.IEnumerable<T?>? actual, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual<T>(System.Collections.Generic.IEnumerable<T?>? notExpected, System.Collections.Generic.IEnumerable<T?>? actual, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual<T>(System.Collections.Generic.IEnumerable<T?>? notExpected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual<T>(System.Collections.Generic.IEnumerable<T?>? notExpected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual<T>(System.Collections.Generic.IEnumerable<T?>? notExpected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEquivalent<T>(System.Collections.Generic.IEnumerable<T?>? expected, System.Collections.Generic.IEnumerable<T?>? actual, System.Collections.Generic.IEqualityComparer<T>? comparer, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains<T1, T2>(System.Collections.Generic.IEnumerable<T1?>? collection, T2? element) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains<T1, T2>(System.Collections.Generic.IEnumerable<T1?>? collection, T2? element, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains<T1, T2>(System.Collections.Generic.IEnumerable<T1?>? collection, T2? element, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain<T1, T2>(System.Collections.Generic.IEnumerable<T1?>? collection, T2? element) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain<T1, T2>(System.Collections.Generic.IEnumerable<T1?>? collection, T2? element, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain<T1, T2>(System.Collections.Generic.IEnumerable<T1?>? collection, T2? element, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotSubsetOf<T>(System.Collections.Generic.IEnumerable<T?>? subset, System.Collections.Generic.IEnumerable<T?>? superset) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotSubsetOf<T>(System.Collections.Generic.IEnumerable<T?>? subset, System.Collections.Generic.IEnumerable<T?>? superset, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotSubsetOf<T>(System.Collections.Generic.IEnumerable<T?>? subset, System.Collections.Generic.IEnumerable<T?>? superset, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsSubsetOf<T>(System.Collections.Generic.IEnumerable<T?>? subset, System.Collections.Generic.IEnumerable<T?>? superset) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsSubsetOf<T>(System.Collections.Generic.IEnumerable<T?>? subset, System.Collections.Generic.IEnumerable<T?>? superset, string? message) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsSubsetOf<T>(System.Collections.Generic.IEnumerable<T?>? subset, System.Collections.Generic.IEnumerable<T?>? superset, string? message, params object?[]? parameters) -> void
static Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.TestIdGenerationStrategy.get -> Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy
